import asyncio
from aiogram import Bot, Dispatcher, filters
from aiogram.types import Message
from aiogram.filters import Command
from config import BOT_TOKEN, STIKER1_TOKEN
from parser import  parse_shedule_on_week
from aiogram import types
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from keyboard import reply_kb1, reply_kb2

pair_times = [
    "08:10 -09:40",
    "09:50 -11:20",
    "11:30 -13:00",
    "13:30 -15:00",
    "15:10 -16:40",
    "16:50 -18:20",
    "18:30 -20:00",
    "20:10 -21:40",
]

digits = [
    "1Ô∏è‚É£",
    "2Ô∏è‚É£",
    "3Ô∏è‚É£",
    "4Ô∏è‚É£",
    "5Ô∏è‚É£",
    "6Ô∏è‚É£",
    "7Ô∏è‚É£",
    "8Ô∏è‚É£",
]



async def get_start(message: Message, bot: Bot):
    await bot.send_sticker(message.chat.id, STIKER1_TOKEN)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", reply_markup=reply_kb1, parse_mode="Markdown")

async def sending_schedule_on_next_day(bot: Bot, chat_id: int):
    schedule = parse_shedule_on_week()
    for day, lessons in schedule.items():
        text = f"<b>–ü—Ä–∏–≤–µ—Ç! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({day})</b>\n\n"
        for i, lesson in enumerate(lessons, 1):
            if lesson['–ü—Ä–µ–¥–º–µ—Ç'] == "-":
                continue
            else:
                text += f"    <i>{digits[i - 1]} {pair_times[i - 1]}.\n    <b>{lesson['–ü—Ä–µ–¥–º–µ—Ç']}</b>: {lesson['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']}</i>\n"
                text += f"    <i>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}</i>\n"
                text += f"    <i>–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}</i>\n\n"
        await bot.send_message(chat_id, text=text, parse_mode="HTML")



async def start_sending_schedule(message: Message, bot: Bot):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ë–æ—Ç –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å. –í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", parse_mode="Markdown" , reply_markup=reply_kb2)

async def start_sending_schedule_on_time(message: Message, bot: Bot):
    time = str(message.text)[2:]
    hour = time.split(":")[0]
    minute = time.split(":")[1]
    sheduler = AsyncIOScheduler(timezone="Asia/Vladivostok")
    # Schedule the job with the bot and chat_id arguments
    sheduler.add_job(sending_schedule_on_next_day, trigger="cron", hour=int(hour), minute=int(minute), args=[bot, message.chat.id])
    sheduler.start()
    await message.answer(f"–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å  —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hour+':'+minute}", parse_mode="Markdown")

async def start():
    bot = Bot(BOT_TOKEN)
    dp = Dispatcher()

    dp.message.register(get_start, Command("start"))
    dp.message.register(start_sending_schedule, lambda message: message.text == "üìù –ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    dp.message.register(start_sending_schedule_on_time, lambda message: message.text == "üïê 16:00")
    dp.message.register(start_sending_schedule_on_time, lambda message: message.text == "üïê 16:00")
    dp.message.register(start_sending_schedule_on_time, lambda message: message.text == "üïê 19:00")

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(start())